"""

Revision ID: 7410fdbd8987
Revises: 6f87fd8f97b6
Create Date: 2024-05-14 00:38:15.458304

"""
from typing import Sequence, Union
import src

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '7410fdbd8987'
down_revision: Union[str, None] = '6f87fd8f97b6'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('maintenanceTroop')
    op.drop_table('maintenanceBuilding')
    op.drop_table('hasPoliticalStance')
    op.drop_constraint('generalModifier_political_stance_fkey', 'generalModifier', type_='foreignkey')
    op.add_column('politicalStance', sa.Column('user_id', sa.Integer(), nullable=False))
    op.add_column('politicalStance', sa.Column('anarchism', src.app.database.models.domains.Decimal(precision=53), nullable=False))
    op.add_column('politicalStance', sa.Column('authoritarian', src.app.database.models.domains.Decimal(precision=53), nullable=False))
    op.add_column('politicalStance', sa.Column('democratic', src.app.database.models.domains.Decimal(precision=53), nullable=False))
    op.add_column('politicalStance', sa.Column('corporate_state', src.app.database.models.domains.Decimal(precision=53), nullable=False))
    op.add_column('politicalStance', sa.Column('theocracy', src.app.database.models.domains.Decimal(precision=53), nullable=False))
    op.add_column('politicalStance', sa.Column('technocracy', src.app.database.models.domains.Decimal(precision=53), nullable=False))
    op.create_foreign_key(None, 'politicalStance', 'user', ['user_id'], ['id'], ondelete='cascade', initially='DEFERRED', deferrable=True)
    op.drop_column('politicalStance', 'name')
    op.drop_column('user', 'last_maintenance_check')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('user', sa.Column('last_maintenance_check', postgresql.TIMESTAMP(), autoincrement=False, nullable=False))
    op.add_column('politicalStance', sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'politicalStance', type_='foreignkey')
    op.drop_column('politicalStance', 'technocracy')
    op.drop_column('politicalStance', 'theocracy')
    op.drop_column('politicalStance', 'corporate_state')
    op.drop_column('politicalStance', 'democratic')
    op.drop_column('politicalStance', 'authoritarian')
    op.drop_column('politicalStance', 'anarchism')
    op.drop_column('politicalStance', 'user_id')
    op.create_foreign_key('generalModifier_political_stance_fkey', 'generalModifier', 'politicalStance', ['political_stance'], ['name'], ondelete='CASCADE', initially='DEFERRED', deferrable=True)
    op.create_table('hasPoliticalStance',
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('value', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('stance_name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['stance_name'], ['politicalStance.name'], name='hasPoliticalStance_stance_name_fkey', ondelete='CASCADE', initially='DEFERRED', deferrable=True),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], name='hasPoliticalStance_user_id_fkey', ondelete='CASCADE', initially='DEFERRED', deferrable=True),
    sa.PrimaryKeyConstraint('user_id', 'stance_name', name='hasPoliticalStance_pkey')
    )
    op.create_table('maintenanceBuilding',
    sa.Column('building_type', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('resource_type', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('amount', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['building_type'], ['buildingType.name'], name='maintenanceBuilding_building_type_fkey', initially='DEFERRED', deferrable=True),
    sa.ForeignKeyConstraint(['resource_type'], ['resourceType.name'], name='maintenanceBuilding_resource_type_fkey', ondelete='CASCADE', initially='DEFERRED', deferrable=True),
    sa.PrimaryKeyConstraint('building_type', 'resource_type', name='maintenanceBuilding_pkey')
    )
    op.create_table('maintenanceTroop',
    sa.Column('troop_type', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('resource_type', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('amount', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['resource_type'], ['resourceType.name'], name='maintenanceTroop_resource_type_fkey', ondelete='CASCADE', initially='DEFERRED', deferrable=True),
    sa.ForeignKeyConstraint(['troop_type'], ['troopType.type'], name='maintenanceTroop_troop_type_fkey', ondelete='CASCADE', initially='DEFERRED', deferrable=True),
    sa.PrimaryKeyConstraint('troop_type', 'resource_type', name='maintenanceTroop_pkey')
    )
    # ### end Alembic commands ###
