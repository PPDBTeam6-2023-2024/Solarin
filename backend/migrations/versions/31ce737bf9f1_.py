"""

Revision ID: 31ce737bf9f1
Revises: 
Create Date: 2024-05-06 20:57:18.792341

"""
from typing import Sequence, Union
import src

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '31ce737bf9f1'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('buildingType',
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('type', sa.String(), nullable=False),
    sa.Column('required_rank', sa.Integer(), nullable=True),
    sa.PrimaryKeyConstraint('name')
    )
    op.create_table('messageBoard',
    sa.Column('bid', sa.Integer(), nullable=False),
    sa.Column('chat_name', sa.String(), nullable=False),
    sa.PrimaryKeyConstraint('bid')
    )
    op.create_table('planetRegionType',
    sa.Column('region_type', sa.String(), nullable=False),
    sa.Column('description', sa.String(), nullable=True),
    sa.PrimaryKeyConstraint('region_type')
    )
    op.create_table('planetType',
    sa.Column('type', sa.TEXT(), nullable=False),
    sa.Column('description', sa.TEXT(), nullable=True),
    sa.PrimaryKeyConstraint('type')
    )
    op.create_table('resourceType',
    sa.Column('name', sa.String(), nullable=False),
    sa.PrimaryKeyConstraint('name')
    )
    op.create_table('spaceRegion',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('troopType',
    sa.Column('type', sa.TEXT(), nullable=False),
    sa.Column('training_time', src.app.database.models.domains.PositiveInteger(), nullable=False),
    sa.Column('attack', sa.Integer(), nullable=False),
    sa.Column('defense', sa.Integer(), nullable=False),
    sa.Column('city_attack', sa.Integer(), nullable=False),
    sa.Column('city_defense', sa.Integer(), nullable=False),
    sa.Column('recovery', sa.Integer(), nullable=False),
    sa.Column('speed', sa.Integer(), nullable=False),
    sa.Column('required_rank', src.app.database.models.domains.PositiveInteger(), nullable=True),
    sa.PrimaryKeyConstraint('type')
    )
    op.create_table('CreationCost',
    sa.Column('building_name', sa.String(), nullable=False),
    sa.Column('cost_type', sa.String(), nullable=False),
    sa.Column('cost_amount', src.app.database.models.domains.PositiveInteger(), nullable=False),
    sa.ForeignKeyConstraint(['building_name'], ['buildingType.name'], initially='DEFERRED', deferrable=True),
    sa.ForeignKeyConstraint(['cost_type'], ['resourceType.name'], initially='DEFERRED', deferrable=True),
    sa.PrimaryKeyConstraint('building_name', 'cost_type')
    )
    op.create_table('alliance',
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('message_board', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['message_board'], ['messageBoard.bid'], initially='DEFERRED', deferrable=True),
    sa.PrimaryKeyConstraint('name')
    )
    op.create_table('associatedWith',
    sa.Column('planet_type', sa.String(), nullable=False),
    sa.Column('region_type', sa.String(), nullable=False),
    sa.ForeignKeyConstraint(['planet_type'], ['planetType.type'], ),
    sa.ForeignKeyConstraint(['region_type'], ['planetRegionType.region_type'], ),
    sa.PrimaryKeyConstraint('planet_type', 'region_type')
    )
    op.create_table('barracksType',
    sa.Column('name', sa.String(), nullable=False),
    sa.ForeignKeyConstraint(['name'], ['buildingType.name'], initially='DEFERRED', deferrable=True),
    sa.PrimaryKeyConstraint('name')
    )
    op.create_table('houseType',
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('residents', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['name'], ['buildingType.name'], initially='DEFERRED', deferrable=True),
    sa.PrimaryKeyConstraint('name')
    )
    op.create_table('planet',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.TEXT(), nullable=False),
    sa.Column('planet_type', sa.TEXT(), nullable=False),
    sa.Column('space_region_id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('x', sa.FLOAT(), nullable=False),
    sa.Column('y', sa.FLOAT(), nullable=False),
    sa.Column('visible', sa.Boolean(), nullable=False),
    sa.ForeignKeyConstraint(['planet_type'], ['planetType.type'], initially='DEFERRED', deferrable=True),
    sa.ForeignKeyConstraint(['space_region_id'], ['spaceRegion.id'], initially='DEFERRED', deferrable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('productionBuildingType',
    sa.Column('name', sa.String(), nullable=False),
    sa.ForeignKeyConstraint(['name'], ['buildingType.name'], initially='DEFERRED', deferrable=True),
    sa.PrimaryKeyConstraint('name')
    )
    op.create_table('towerType',
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('attack', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['name'], ['buildingType.name'], initially='DEFERRED', deferrable=True),
    sa.PrimaryKeyConstraint('name')
    )
    op.create_table('troopTypeCost',
    sa.Column('troop_type', sa.TEXT(), nullable=False),
    sa.Column('resource_type', sa.TEXT(), nullable=False),
    sa.Column('amount', src.app.database.models.domains.PositiveInteger(), nullable=False),
    sa.ForeignKeyConstraint(['resource_type'], ['resourceType.name'], ondelete='cascade', initially='DEFERRED', deferrable=True),
    sa.ForeignKeyConstraint(['troop_type'], ['troopType.type'], ondelete='cascade', initially='DEFERRED', deferrable=True),
    sa.PrimaryKeyConstraint('troop_type', 'resource_type')
    )
    op.create_table('wallType',
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('defense', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['name'], ['buildingType.name'], initially='DEFERRED', deferrable=True),
    sa.PrimaryKeyConstraint('name')
    )
    op.create_table('planetRegion',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('planet_id', sa.Integer(), nullable=True),
    sa.Column('region_type', sa.TEXT(), nullable=False),
    sa.Column('x', src.app.database.models.domains.Coordinate(precision=53), nullable=False),
    sa.Column('y', src.app.database.models.domains.Coordinate(precision=53), nullable=False),
    sa.ForeignKeyConstraint(['planet_id'], ['planet.id'], ondelete='cascade', initially='DEFERRED', deferrable=True),
    sa.ForeignKeyConstraint(['region_type'], ['planetRegionType.region_type'], initially='DEFERRED', deferrable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('producesResources',
    sa.Column('building_name', sa.String(), nullable=False),
    sa.Column('resource_name', sa.String(), nullable=False),
    sa.Column('base_production', src.app.database.models.domains.PositiveInteger(), nullable=False),
    sa.Column('max_capacity', src.app.database.models.domains.PositiveInteger(), nullable=False),
    sa.ForeignKeyConstraint(['building_name'], ['productionBuildingType.name'], ondelete='cascade', initially='DEFERRED', deferrable=True),
    sa.ForeignKeyConstraint(['resource_name'], ['resourceType.name'], ondelete='cascade', initially='DEFERRED', deferrable=True),
    sa.PrimaryKeyConstraint('building_name', 'resource_name')
    )
    op.create_table('user',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('email', sa.String(), nullable=False),
    sa.Column('username', sa.String(), nullable=False),
    sa.Column('hashed_password', sa.String(), nullable=False),
    sa.Column('alliance', sa.String(), nullable=True),
    sa.Column('faction_name', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['alliance'], ['alliance.name'], ondelete='SET NULL', initially='DEFERRED', deferrable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('email'),
    sa.UniqueConstraint('username')
    )
    op.create_index(op.f('ix_user_id'), 'user', ['id'], unique=False)
    op.create_table('FriendRequest',
    sa.Column('from_user_id', sa.Integer(), nullable=False),
    sa.Column('to_user_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['from_user_id'], ['user.id'], ondelete='cascade', initially='DEFERRED', deferrable=True),
    sa.ForeignKeyConstraint(['to_user_id'], ['user.id'], ondelete='cascade', initially='DEFERRED', deferrable=True),
    sa.PrimaryKeyConstraint('from_user_id', 'to_user_id')
    )
    op.create_table('allianceRequest',
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('alliance_name', sa.String(), nullable=False),
    sa.ForeignKeyConstraint(['alliance_name'], ['alliance.name'], ondelete='cascade', initially='DEFERRED', deferrable=True),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ondelete='cascade', initially='DEFERRED', deferrable=True),
    sa.PrimaryKeyConstraint('user_id')
    )
    op.create_table('army',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('planet_id', sa.Integer(), nullable=True),
    sa.Column('departure_time', sa.DateTime(), nullable=True),
    sa.Column('arrival_time', sa.DateTime(), nullable=True),
    sa.Column('x', src.app.database.models.domains.Coordinate(precision=53), nullable=False),
    sa.Column('y', src.app.database.models.domains.Coordinate(precision=53), nullable=False),
    sa.Column('to_x', src.app.database.models.domains.Coordinate(precision=53), nullable=False),
    sa.Column('to_y', src.app.database.models.domains.Coordinate(precision=53), nullable=False),
    sa.ForeignKeyConstraint(['planet_id'], ['planet.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ondelete='cascade', initially='DEFERRED', deferrable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('city',
    sa.Column('region_id', sa.Integer(), nullable=True),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('controlled_by', sa.Integer(), nullable=False),
    sa.Column('x', src.app.database.models.domains.Coordinate(precision=53), nullable=False),
    sa.Column('y', src.app.database.models.domains.Coordinate(precision=53), nullable=False),
    sa.Column('rank', src.app.database.models.domains.PositiveInteger(), nullable=False),
    sa.ForeignKeyConstraint(['controlled_by'], ['user.id'], initially='DEFERRED', deferrable=True),
    sa.ForeignKeyConstraint(['region_id'], ['planetRegion.id'], initially='DEFERRED', deferrable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('friendsOf',
    sa.Column('user1_id', sa.Integer(), nullable=False),
    sa.Column('user2_id', sa.Integer(), nullable=False),
    sa.Column('message_board', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['message_board'], ['messageBoard.bid'], ),
    sa.ForeignKeyConstraint(['user1_id'], ['user.id'], ondelete='cascade', initially='DEFERRED', deferrable=True),
    sa.ForeignKeyConstraint(['user2_id'], ['user.id'], ondelete='cascade', initially='DEFERRED', deferrable=True),
    sa.PrimaryKeyConstraint('user1_id', 'user2_id')
    )
    op.create_table('hasResources',
    sa.Column('owner_id', sa.Integer(), nullable=False),
    sa.Column('resource_type', sa.String(), nullable=False),
    sa.Column('quantity', src.app.database.models.domains.PositiveInteger(), nullable=False),
    sa.ForeignKeyConstraint(['owner_id'], ['user.id'], ondelete='cascade', initially='DEFERRED', deferrable=True),
    sa.ForeignKeyConstraint(['resource_type'], ['resourceType.name'], ondelete='cascade', initially='DEFERRED', deferrable=True),
    sa.PrimaryKeyConstraint('owner_id', 'resource_type')
    )
    op.create_table('message',
    sa.Column('mid', sa.Integer(), nullable=False),
    sa.Column('sender_id', sa.Integer(), nullable=False),
    sa.Column('message_board', sa.Integer(), nullable=False),
    sa.Column('create_date_time', sa.TIMESTAMP(), nullable=False),
    sa.Column('body', sa.TEXT(), nullable=False),
    sa.ForeignKeyConstraint(['message_board'], ['messageBoard.bid'], ondelete='cascade', initially='DEFERRED', deferrable=True),
    sa.ForeignKeyConstraint(['sender_id'], ['user.id'], ondelete='SET NULL', initially='DEFERRED', deferrable=True),
    sa.PrimaryKeyConstraint('mid')
    )
    op.create_table('tradeOffer',
    sa.Column('alliance_name', sa.String(), nullable=False),
    sa.Column('offer_owner', sa.Integer(), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['offer_owner'], ['user.id'], ondelete='cascade', initially='DEFERRED', deferrable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_tradeOffer_id'), 'tradeOffer', ['id'], unique=False)
    op.create_table('troopRank',
    sa.Column('troop_type', sa.TEXT(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('rank', src.app.database.models.domains.PositiveInteger(), nullable=True),
    sa.ForeignKeyConstraint(['troop_type'], ['troopType.type'], ondelete='cascade', initially='DEFERRED', deferrable=True),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ondelete='cascade', initially='DEFERRED', deferrable=True),
    sa.PrimaryKeyConstraint('troop_type', 'user_id')
    )
    op.create_table('armyConsistsOf',
    sa.Column('army_id', sa.Integer(), nullable=False),
    sa.Column('troop_type', sa.String(), nullable=False),
    sa.Column('rank', src.app.database.models.domains.PositiveInteger(), nullable=False),
    sa.Column('size', src.app.database.models.domains.PositiveInteger(), nullable=False),
    sa.ForeignKeyConstraint(['army_id'], ['army.id'], ondelete='cascade', initially='DEFERRED', deferrable=True),
    sa.ForeignKeyConstraint(['troop_type'], ['troopType.type'], initially='DEFERRED', deferrable=True),
    sa.PrimaryKeyConstraint('army_id', 'troop_type', 'rank')
    )
    op.create_table('armyInCity',
    sa.Column('army_id', sa.Integer(), nullable=False),
    sa.Column('city_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['army_id'], ['army.id'], ondelete='cascade', initially='DEFERRED', deferrable=True),
    sa.ForeignKeyConstraint(['city_id'], ['city.id'], initially='DEFERRED', deferrable=True),
    sa.PrimaryKeyConstraint('army_id'),
    sa.UniqueConstraint('city_id')
    )
    op.create_table('buildingInstance',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('city_id', sa.Integer(), nullable=False),
    sa.Column('building_type', sa.String(), nullable=False),
    sa.Column('rank', src.app.database.models.domains.PositiveInteger(), nullable=False),
    sa.Column('last_checked', sa.TIMESTAMP(), nullable=False),
    sa.ForeignKeyConstraint(['building_type'], ['buildingType.name'], initially='DEFERRED', deferrable=True),
    sa.ForeignKeyConstraint(['city_id'], ['city.id'], ondelete='cascade', initially='DEFERRED', deferrable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_buildingInstance_id'), 'buildingInstance', ['id'], unique=False)
    op.create_table('onArrive',
    sa.Column('army_id', sa.Integer(), nullable=False),
    sa.Column('target_type', sa.String(), nullable=False),
    sa.ForeignKeyConstraint(['army_id'], ['army.id'], ondelete='cascade', initially='DEFERRED', deferrable=True),
    sa.PrimaryKeyConstraint('army_id')
    )
    op.create_table('tradeGives',
    sa.Column('offer_id', sa.Integer(), nullable=False),
    sa.Column('resource_type', sa.String(), nullable=False),
    sa.Column('amount', src.app.database.models.domains.PositiveInteger(), nullable=False),
    sa.ForeignKeyConstraint(['offer_id'], ['tradeOffer.id'], ondelete='cascade', initially='DEFERRED', deferrable=True),
    sa.ForeignKeyConstraint(['resource_type'], ['resourceType.name'], ondelete='cascade', initially='DEFERRED', deferrable=True),
    sa.PrimaryKeyConstraint('offer_id', 'resource_type')
    )
    op.create_table('tradeReceives',
    sa.Column('offer_id', sa.Integer(), nullable=False),
    sa.Column('resource_type', sa.String(), nullable=False),
    sa.Column('amount', src.app.database.models.domains.PositiveInteger(), nullable=False),
    sa.ForeignKeyConstraint(['offer_id'], ['tradeOffer.id'], ondelete='cascade', initially='DEFERRED', deferrable=True),
    sa.ForeignKeyConstraint(['resource_type'], ['resourceType.name'], ondelete='cascade', initially='DEFERRED', deferrable=True),
    sa.PrimaryKeyConstraint('offer_id', 'resource_type')
    )
    op.create_table('attackArmy',
    sa.Column('army_id', sa.Integer(), nullable=False),
    sa.Column('target_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['army_id'], ['onArrive.army_id'], ondelete='cascade', initially='DEFERRED', deferrable=True),
    sa.ForeignKeyConstraint(['target_id'], ['army.id'], initially='DEFERRED', deferrable=True),
    sa.PrimaryKeyConstraint('army_id', 'target_id')
    )
    op.create_table('attackCity',
    sa.Column('army_id', sa.Integer(), nullable=False),
    sa.Column('target_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['army_id'], ['onArrive.army_id'], ondelete='cascade', initially='DEFERRED', deferrable=True),
    sa.ForeignKeyConstraint(['target_id'], ['city.id'], initially='DEFERRED', deferrable=True),
    sa.PrimaryKeyConstraint('army_id', 'target_id')
    )
    op.create_table('enterCity',
    sa.Column('army_id', sa.Integer(), nullable=False),
    sa.Column('target_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['army_id'], ['onArrive.army_id'], ondelete='cascade', initially='DEFERRED', deferrable=True),
    sa.ForeignKeyConstraint(['target_id'], ['city.id'], ondelete='cascade', initially='DEFERRED', deferrable=True),
    sa.PrimaryKeyConstraint('army_id', 'target_id')
    )
    op.create_table('enterPlanet',
    sa.Column('army_id', sa.Integer(), nullable=False),
    sa.Column('target_id', sa.Integer(), nullable=False),
    sa.Column('x', src.app.database.models.domains.Coordinate(precision=53), nullable=False),
    sa.Column('y', src.app.database.models.domains.Coordinate(precision=53), nullable=False),
    sa.ForeignKeyConstraint(['army_id'], ['onArrive.army_id'], ondelete='cascade', initially='DEFERRED', deferrable=True),
    sa.ForeignKeyConstraint(['target_id'], ['planet.id'], ondelete='cascade', initially='DEFERRED', deferrable=True),
    sa.PrimaryKeyConstraint('army_id', 'target_id')
    )
    op.create_table('mergeArmies',
    sa.Column('army_id', sa.Integer(), nullable=False),
    sa.Column('target_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['army_id'], ['onArrive.army_id'], ondelete='cascade', initially='DEFERRED', deferrable=True),
    sa.ForeignKeyConstraint(['target_id'], ['army.id'], initially='DEFERRED', deferrable=True),
    sa.PrimaryKeyConstraint('army_id', 'target_id')
    )
    op.create_table('trainingQueue',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('building_id', sa.Integer(), nullable=False),
    sa.Column('train_remaining', src.app.database.models.domains.PositiveInteger(), nullable=False),
    sa.Column('troop_type', sa.String(), nullable=True),
    sa.Column('rank', src.app.database.models.domains.PositiveInteger(), nullable=False),
    sa.Column('training_size', src.app.database.models.domains.PositiveInteger(), nullable=False),
    sa.ForeignKeyConstraint(['building_id'], ['buildingInstance.id'], ondelete='cascade', initially='DEFERRED', deferrable=True),
    sa.ForeignKeyConstraint(['troop_type'], ['troopType.type'], ondelete='cascade', initially='DEFERRED', deferrable=True),
    sa.PrimaryKeyConstraint('id', 'building_id')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('trainingQueue')
    op.drop_table('mergeArmies')
    op.drop_table('enterPlanet')
    op.drop_table('enterCity')
    op.drop_table('attackCity')
    op.drop_table('attackArmy')
    op.drop_table('tradeReceives')
    op.drop_table('tradeGives')
    op.drop_table('onArrive')
    op.drop_index(op.f('ix_buildingInstance_id'), table_name='buildingInstance')
    op.drop_table('buildingInstance')
    op.drop_table('armyInCity')
    op.drop_table('armyConsistsOf')
    op.drop_table('troopRank')
    op.drop_index(op.f('ix_tradeOffer_id'), table_name='tradeOffer')
    op.drop_table('tradeOffer')
    op.drop_table('message')
    op.drop_table('hasResources')
    op.drop_table('friendsOf')
    op.drop_table('city')
    op.drop_table('army')
    op.drop_table('allianceRequest')
    op.drop_table('FriendRequest')
    op.drop_index(op.f('ix_user_id'), table_name='user')
    op.drop_table('user')
    op.drop_table('producesResources')
    op.drop_table('planetRegion')
    op.drop_table('wallType')
    op.drop_table('troopTypeCost')
    op.drop_table('towerType')
    op.drop_table('productionBuildingType')
    op.drop_table('planet')
    op.drop_table('houseType')
    op.drop_table('barracksType')
    op.drop_table('associatedWith')
    op.drop_table('alliance')
    op.drop_table('CreationCost')
    op.drop_table('troopType')
    op.drop_table('spaceRegion')
    op.drop_table('resourceType')
    op.drop_table('planetType')
    op.drop_table('planetRegionType')
    op.drop_table('messageBoard')
    op.drop_table('buildingType')
    # ### end Alembic commands ###
